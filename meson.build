project('softfloat', ['c'],
  version: '3e',
)

softfloat_files = [
  'src' / 'bf16_isSignalingNaN.c',
  'src' / 'bf16_to_f32.c',
  'src' / 'extF80_add.c',
  'src' / 'extF80_div.c',
  'src' / 'extF80_eq.c',
  'src' / 'extF80_eq_signaling.c',
  'src' / 'extF80_isSignalingNaN.c',
  'src' / 'extF80_le.c',
  'src' / 'extF80_le_quiet.c',
  'src' / 'extF80_lt.c',
  'src' / 'extF80_lt_quiet.c',
  'src' / 'extF80_mul.c',
  'src' / 'extF80_rem.c',
  'src' / 'extF80_roundToInt.c',
  'src' / 'extF80_sqrt.c',
  'src' / 'extF80_sub.c',
  'src' / 'extF80_to_f128.c',
  'src' / 'extF80_to_f16.c',
  'src' / 'extF80_to_f32.c',
  'src' / 'extF80_to_f64.c',
  'src' / 'extF80_to_i32.c',
  'src' / 'extF80_to_i32_r_minMag.c',
  'src' / 'extF80_to_i64.c',
  'src' / 'extF80_to_i64_r_minMag.c',
  'src' / 'extF80_to_ui32.c',
  'src' / 'extF80_to_ui32_r_minMag.c',
  'src' / 'extF80_to_ui64.c',
  'src' / 'extF80_to_ui64_r_minMag.c',
  'src' / 'f128_add.c',
  'src' / 'f128_div.c',
  'src' / 'f128_eq.c',
  'src' / 'f128_eq_signaling.c',
  'src' / 'f128_isSignalingNaN.c',
  'src' / 'f128_le.c',
  'src' / 'f128_le_quiet.c',
  'src' / 'f128_lt.c',
  'src' / 'f128_lt_quiet.c',
  'src' / 'f128_mulAdd.c',
  'src' / 'f128_mul.c',
  'src' / 'f128_rem.c',
  'src' / 'f128_roundToInt.c',
  'src' / 'f128_sqrt.c',
  'src' / 'f128_sub.c',
  'src' / 'f128_to_extF80.c',
  'src' / 'f128_to_f16.c',
  'src' / 'f128_to_f32.c',
  'src' / 'f128_to_f64.c',
  'src' / 'f128_to_i32.c',
  'src' / 'f128_to_i32_r_minMag.c',
  'src' / 'f128_to_i64.c',
  'src' / 'f128_to_i64_r_minMag.c',
  'src' / 'f128_to_ui32.c',
  'src' / 'f128_to_ui32_r_minMag.c',
  'src' / 'f128_to_ui64.c',
  'src' / 'f128_to_ui64_r_minMag.c',
  'src' / 'f16_add.c',
  'src' / 'f16_div.c',
  'src' / 'f16_eq.c',
  'src' / 'f16_eq_signaling.c',
  'src' / 'f16_isSignalingNaN.c',
  'src' / 'f16_le.c',
  'src' / 'f16_le_quiet.c',
  'src' / 'f16_lt.c',
  'src' / 'f16_lt_quiet.c',
  'src' / 'f16_mulAdd.c',
  'src' / 'f16_mul.c',
  'src' / 'f16_rem.c',
  'src' / 'f16_roundToInt.c',
  'src' / 'f16_sqrt.c',
  'src' / 'f16_sub.c',
  'src' / 'f16_to_extF80.c',
  'src' / 'f16_to_f128.c',
  'src' / 'f16_to_f32.c',
  'src' / 'f16_to_f64.c',
  'src' / 'f16_to_i32.c',
  'src' / 'f16_to_i32_r_minMag.c',
  'src' / 'f16_to_i64.c',
  'src' / 'f16_to_i64_r_minMag.c',
  'src' / 'f16_to_ui32.c',
  'src' / 'f16_to_ui32_r_minMag.c',
  'src' / 'f16_to_ui64.c',
  'src' / 'f16_to_ui64_r_minMag.c',
  'src' / 'f32_add.c',
  'src' / 'f32_div.c',
  'src' / 'f32_eq.c',
  'src' / 'f32_eq_signaling.c',
  'src' / 'f32_isSignalingNaN.c',
  'src' / 'f32_le.c',
  'src' / 'f32_le_quiet.c',
  'src' / 'f32_lt.c',
  'src' / 'f32_lt_quiet.c',
  'src' / 'f32_mulAdd.c',
  'src' / 'f32_mul.c',
  'src' / 'f32_rem.c',
  'src' / 'f32_roundToInt.c',
  'src' / 'f32_sqrt.c',
  'src' / 'f32_sub.c',
  'src' / 'f32_to_bf16.c',
  'src' / 'f32_to_extF80.c',
  'src' / 'f32_to_f128.c',
  'src' / 'f32_to_f16.c',
  'src' / 'f32_to_f64.c',
  'src' / 'f32_to_i32.c',
  'src' / 'f32_to_i32_r_minMag.c',
  'src' / 'f32_to_i64.c',
  'src' / 'f32_to_i64_r_minMag.c',
  'src' / 'f32_to_ui32.c',
  'src' / 'f32_to_ui32_r_minMag.c',
  'src' / 'f32_to_ui64.c',
  'src' / 'f32_to_ui64_r_minMag.c',
  'src' / 'f64_add.c',
  'src' / 'f64_div.c',
  'src' / 'f64_eq.c',
  'src' / 'f64_eq_signaling.c',
  'src' / 'f64_isSignalingNaN.c',
  'src' / 'f64_le.c',
  'src' / 'f64_le_quiet.c',
  'src' / 'f64_lt.c',
  'src' / 'f64_lt_quiet.c',
  'src' / 'f64_mulAdd.c',
  'src' / 'f64_mul.c',
  'src' / 'f64_rem.c',
  'src' / 'f64_roundToInt.c',
  'src' / 'f64_sqrt.c',
  'src' / 'f64_sub.c',
  'src' / 'f64_to_extF80.c',
  'src' / 'f64_to_f128.c',
  'src' / 'f64_to_f16.c',
  'src' / 'f64_to_f32.c',
  'src' / 'f64_to_i32.c',
  'src' / 'f64_to_i32_r_minMag.c',
  'src' / 'f64_to_i64.c',
  'src' / 'f64_to_i64_r_minMag.c',
  'src' / 'f64_to_ui32.c',
  'src' / 'f64_to_ui32_r_minMag.c',
  'src' / 'f64_to_ui64.c',
  'src' / 'f64_to_ui64_r_minMag.c',
  'src' / 'i32_to_extF80.c',
  'src' / 'i32_to_f128.c',
  'src' / 'i32_to_f16.c',
  'src' / 'i32_to_f32.c',
  'src' / 'i32_to_f64.c',
  'src' / 'i64_to_extF80.c',
  'src' / 'i64_to_f128.c',
  'src' / 'i64_to_f16.c',
  'src' / 'i64_to_f32.c',
  'src' / 'i64_to_f64.c',
  'src' / 's_add128.c',
  'src' / 's_add256M.c',
  'src' / 's_addCarryM.c',
  'src' / 's_addComplCarryM.c',
  'src' / 's_addMagsExtF80.c',
  'src' / 's_addMagsF128.c',
  'src' / 's_addMagsF16.c',
  'src' / 's_addMagsF32.c',
  'src' / 's_addMagsF64.c',
  'src' / 's_addM.c',
  'src' / 's_approxRecip_1Ks.c',
  'src' / 's_approxRecip32_1.c',
  'src' / 's_approxRecipSqrt_1Ks.c',
  'src' / 's_approxRecipSqrt32_1.c',
  'src' / 's_bf16UIToCommonNaN.c',
  'src' / 's_commonNaNToBF16UI.c',
  'src' / 's_commonNaNToExtF80UI.c',
  'src' / 's_commonNaNToF128UI.c',
  'src' / 's_commonNaNToF16UI.c',
  'src' / 's_commonNaNToF32UI.c',
  'src' / 's_commonNaNToF64UI.c',
  'src' / 's_compare96M.c',
  'src' / 's_countLeadingZeros16.c',
  'src' / 's_countLeadingZeros32.c',
  'src' / 's_countLeadingZeros64.c',
  'src' / 's_countLeadingZeros8.c',
  'src' / 's_eq128.c',
  'src' / 's_extF80UIToCommonNaN.c',
  'src' / 's_f128UIToCommonNaN.c',
  'src' / 's_f16UIToCommonNaN.c',
  'src' / 's_f32UIToCommonNaN.c',
  'src' / 's_f64UIToCommonNaN.c',
  'src' / 's_le128.c',
  'src' / 's_lt128.c',
  'src' / 's_mul128By32.c',
  'src' / 's_mul128To256M.c',
  'src' / 's_mul64ByShifted32To128.c',
  'src' / 's_mul64To128.c',
  'src' / 's_mulAddF128.c',
  'src' / 's_mulAddF16.c',
  'src' / 's_mulAddF32.c',
  'src' / 's_mulAddF64.c',
  'src' / 's_negXM.c',
  'src' / 's_normExtF80SigM.c',
  'src' / 's_normRoundPackToExtF80.c',
  'src' / 's_normRoundPackToF128.c',
  'src' / 's_normRoundPackToF16.c',
  'src' / 's_normRoundPackToF32.c',
  'src' / 's_normRoundPackToF64.c',
  'src' / 's_normSubnormalBF16Sig.c',
  'src' / 's_normSubnormalExtF80Sig.c',
  'src' / 's_normSubnormalF128Sig.c',
  'src' / 's_normSubnormalF16Sig.c',
  'src' / 's_normSubnormalF32Sig.c',
  'src' / 's_normSubnormalF64Sig.c',
  'src' / 'softfloat_raiseFlags.c',
  'src' / 'softfloat_state.c',
  'src' / 's_propagateNaNExtF80UI.c',
  'src' / 's_propagateNaNF128UI.c',
  'src' / 's_propagateNaNF16UI.c',
  'src' / 's_propagateNaNF32UI.c',
  'src' / 's_propagateNaNF64UI.c',
  'src' / 's_remStepMBy32.c',
  'src' / 's_roundMToI64.c',
  'src' / 's_roundMToUI64.c',
  'src' / 's_roundPackToBF16.c',
  'src' / 's_roundPackToExtF80.c',
  'src' / 's_roundPackToF128.c',
  'src' / 's_roundPackToF16.c',
  'src' / 's_roundPackToF32.c',
  'src' / 's_roundPackToF64.c',
  'src' / 's_roundToI32.c',
  'src' / 's_roundToI64.c',
  'src' / 's_roundToUI32.c',
  'src' / 's_roundToUI64.c',
  'src' / 's_shiftRightJam128.c',
  'src' / 's_shiftRightJam128Extra.c',
  'src' / 's_shiftRightJam256M.c',
  'src' / 's_shiftRightJam32.c',
  'src' / 's_shiftRightJam64.c',
  'src' / 's_shiftRightJam64Extra.c',
  'src' / 's_shortShiftLeft128.c',
  'src' / 's_shortShiftLeft64To96M.c',
  'src' / 's_shortShiftLeftM.c',
  'src' / 's_shortShiftRight128.c',
  'src' / 's_shortShiftRightExtendM.c',
  'src' / 's_shortShiftRightJam128.c',
  'src' / 's_shortShiftRightJam128Extra.c',
  'src' / 's_shortShiftRightJam64.c',
  'src' / 's_shortShiftRightJam64Extra.c',
  'src' / 's_shortShiftRightJamM.c',
  'src' / 's_shortShiftRightM.c',
  'src' / 's_sub128.c',
  'src' / 's_sub1XM.c',
  'src' / 's_sub256M.c',
  'src' / 's_subMagsExtF80.c',
  'src' / 's_subMagsF128.c',
  'src' / 's_subMagsF16.c',
  'src' / 's_subMagsF32.c',
  'src' / 's_subMagsF64.c',
  'src' / 's_subM.c',
  'src' / 'ui32_to_extF80.c',
  'src' / 'ui32_to_f128.c',
  'src' / 'ui32_to_f16.c',
  'src' / 'ui32_to_f32.c',
  'src' / 'ui32_to_f64.c',
  'src' / 'ui64_to_extF80.c',
  'src' / 'ui64_to_f128.c',
  'src' / 'ui64_to_f16.c',
  'src' / 'ui64_to_f32.c',
  'src' / 'ui64_to_f64.c'
]

softfloat_inc = [include_directories('include')]

softfloat_libname = 'softfloat'
if get_option('cross_native')
  # librzutils is used for building sdb files natively
  # and requires this ugly hack
  softfloat_libname = 'softfloat_cross_native'
endif

softfloat = library(softfloat_libname, softfloat_files,
  include_directories: softfloat_inc,
  implicit_include_directories: false,
  install: false,
  native: get_option('cross_native'),
)

softfloat_dep = declare_dependency(
  link_with: softfloat,
  include_directories: softfloat_inc,
)

if get_option('cross_native')
  # librzutils is used for building sdb files natively
  # and requires this ugly hack
  meson.override_dependency('softfloat_cross_native', softfloat_dep)
else
  meson.override_dependency('softfloat', softfloat_dep)
endif
